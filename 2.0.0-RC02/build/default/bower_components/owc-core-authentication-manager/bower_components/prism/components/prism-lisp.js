(function(a){function b(m){return new RegExp('(\\()'+m+'(?=[\\s\\)])')}function c(m){return new RegExp('([\\s([])'+m+'(?=[\\s)])')}var i={heading:{pattern:/;;;.*/,alias:['comment','title']},comment:/;.*/,string:{pattern:/"(?:[^"\\]*|\\.)*"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\s])/,symbol:/`[-+*\/_~!@$%^=<>{}\w]+'/}},'quoted-symbol':{pattern:/#?'[-+*\/_~!@$%^=<>{}\w]+/,alias:['variable','symbol']},'lisp-property':{pattern:/:[-+*\/_~!@$%^=<>{}\w]+/,alias:'property'},splice:{pattern:/,@?[-+*\/_~!@$%^=<>{}\w]+/,alias:['symbol','variable']},keyword:[{pattern:/(\()(?:(?:lexical-)?let\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)(?=\s)/,lookbehind:!0},{pattern:/(\()(?:for|do|collect|return|finally|append|concat|in|by)(?=\s)/,lookbehind:!0}],declare:{pattern:b('declare'),lookbehind:!0,alias:'keyword'},interactive:{pattern:b('interactive'),lookbehind:!0,alias:'keyword'},boolean:{pattern:c('(?:t|nil)'),lookbehind:!0},number:{pattern:c('[-+]?\\d+(?:\\.\\d*)?'),lookbehind:!0},defvar:{pattern:/(\()def(?:var|const|custom|group)\s+[-+*\/_~!@$%^=<>{}\w]+/,lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:/[-+*\/_~!@$%^=<>{}\w]+/}},defun:{pattern:/(\()(?:cl-)?(?:defun\*?|defmacro)\s+[-+*\/_~!@$%^=<>{}\w]+\s+\([\s\S]*?\)/,lookbehind:!0,inside:{keyword:/^(?:cl-)?def\S+/,arguments:null,function:{pattern:/(^\s)[-+*\/_~!@$%^=<>{}\w]+/,lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:/(\()lambda\s+\((?:&?[-+*\/_~!@$%^=<>{}\w]+\s*)*\)/,lookbehind:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:/(\()[-+*\/_~!@$%^=<>{}\w]+/,lookbehind:!0},punctuation:[/(['`,]?\(|[)\[\]])/,{pattern:/(\s)\.(?=\s)/,lookbehind:!0}]},j={'lisp-marker':/&[-+*\/_~!@$%^=<>{}\w]+/,rest:{argument:{pattern:/[-+*\/_~!@$%^=<>{}\w]+/,alias:'variable'},varform:{pattern:/(\()[-+*\/_~!@$%^=<>{}\w]+\s+\S[\s\S]*(?=\))/,lookbehind:!0,inside:{string:i.string,boolean:i.boolean,number:i.number,symbol:i.symbol,punctuation:/[()]/}}}},l={pattern:/(\()[\s\S]*(?=\))/,lookbehind:!0,inside:{'rest-vars':{pattern:/&(?:rest|body)\s+\S+(?:\s+\S+)*/,inside:j},'other-marker-vars':{pattern:/&(?:optional|aux)\s+\S+(?:\s+\S+)*/,inside:j},keys:{pattern:/&key\s+\S+(?:\s+\S+)*(?:\s+&allow-other-keys)?/,inside:j},argument:{pattern:/[-+*\/_~!@$%^=<>{}\w]+/,alias:'variable'},punctuation:/[()]/}};i.lambda.inside.arguments=l,i.defun.inside.arguments=a.util.clone(l),i.defun.inside.arguments.inside.sublist=l,a.languages.lisp=i,a.languages.elisp=i,a.languages.emacs=i,a.languages['emacs-lisp']=i})(Prism);